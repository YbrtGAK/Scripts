# -*- coding: utf-8 -*-
"""
Created on Fri Jan 24 15:54:44 2025

@author: yberton

Ce script a pour objectif de réaliser un bilan d'énergie sur le pre-chauffeur
afin de déterminer le coefficient de perte thermique convectif
"""

#Imports
import CoolProp.CoolProp as CP
import pandas as pd
from utilities.path import getAFilesPath, getAFilesPathToSave
from utilities.data.lvm import lvm_to_df
from utilities.widgets import df_interactive_plot
from math import pi
import numpy as np
import matplotlib.pyplot as plt

#Variables d'utilité
fluid = "R245fa"

#Définitions des fonctions

#Enthalphie [J/kg]
H = lambda T,P : CP.PropsSI("H", "T",T,"P",P,fluid)

#Conductivité thermique [W/K]
U = lambda Te,Ts,U,I,m_dot,He,Hs,Tamb,P : (1/(((Ts-Te)/2 - Tamb))*(U*I - m_dot*(H(Ts,P) - H(Te,P))))**(-1)

#Capacité thermique [J/kg/K]
Cp = lambda Tmid,P : CP.PropsSI("Cp","T",Tmid,"P",P,fluid)

#Acquisition des données
df_PH = lvm_to_df(getAFilesPath("Données du pré-chauffeur")) #Acquiert les données dans un dataframe (Préchauffeur)
df_TS = lvm_to_df(getAFilesPath("Données de l'évaporateur")) # Evaporateur

#Conversion de l'index en temps [s]
df_PH['Temps [s]'] = df_PH.index*10
df_PH.set_index("Temps [s]",inplace=True)

df_TS['Temps [s]'] = df_TS.index*10
df_TS.set_index("Temps [s]",inplace=True)

cols_PH = df_PH.columns #Acquiert les noms des mesurandes
cols_TS = df_TS.columns

#Tri des données pour garder uniquement celles d'intérêt
df_PH = df_PH.filter(["224 - PH_inlet_imm [°C]", "225 -  PH_inlet [°C]","227 - PH2 [°C]",
                   "228 - PH3 [°C]", "229 - PH4 [°C]","202 - E_in_imm [°C]",
                   "105 - mass [kg/s]", "109 -  V_PH_corr [V]", "I_PH (A)", "230 - Ambiant [°C]", '115 - P_reservoir [bars]', '118 - P_TS_in [bars]']) #Tri les données pour récupérer les valeurs d'intérêt

df_TS =  df_TS.filter(["202 - E_in_imm [°C]", "206 - E_1_bot [°C]","209 - E_2_bot [°C]",
                   "213 - E_3_bot [°C]", "218 - E_out_imm [°C]",
                   "105 - mass [kg/s]", "117 - V_TS_corr [V]", "I_TS (A)", "230 - Ambiant [°C]",'118 - P_TS_in [bars]', '114 - P_TS_out [bars]']) #Tri les données pour récupérer les valeurs d'intérêt

df_Pdiff_PH = df_PH.filter(['114 - DP_50 [mbars]'])
df_Pabs_PH = df_PH.filter(['115 - P_reservoir [bars]','118 - P_TS_in [bars]'])

df_Pabs_TS = df_TS.filter(['118 - P_TS_in [bars]', '114 - P_TS_out [bars]'])

#Calcul des grandeurs d'intérêt
df_PH[r'$P_{elec,PH}$ [$W$]'] = df_PH["I_PH (A)"]*df_PH["109 -  V_PH_corr [V]"] #Puissance électrique [W]
df_PH["H_in_PH [J/kg]"] = H(df_PH["224 - PH_inlet_imm [°C]"].values + 273.15,df_Pabs_PH['115 - P_reservoir [bars]'].values*1E5) #Enthalpie en entrée du pré-chauffeur
df_PH["H_out_PH [J/kg]"] = H(df_PH["202 - E_in_imm [°C]"].values + 273.15,df_Pabs_PH['118 - P_TS_in [bars]'].values*1E5) #Enthalpie en sortie de pré-chauffeur
df_PH[r'$P_{heat,PH}$ [$W_{th}$]'] = df_PH["105 - mass [kg/s]"]*(df_PH["H_out_PH [J/kg]"] - df_PH["H_in_PH [J/kg]"])

df_TS[r'$P_{elec,TS}$ [$W$]'] = df_TS["I_TS (A)"]*df_TS["117 - V_TS_corr [V]"] #Puissance électrique [W]
df_TS["H_in_TS [J/kg]"] = H(df_TS["202 - E_in_imm [°C]"].values + 273.15,df_Pabs_TS['118 - P_TS_in [bars]'].values*1E5) #Enthalpie en entrée du pré-chauffeur
df_TS["H_out_TS [J/kg]"] = H(df_TS["218 - E_out_imm [°C]"].values + 273.15,df_Pabs_TS['114 - P_TS_out [bars]'].values*1E5) #Enthalpie en sortie de pré-chauffeur
df_TS[r'$P_{heat,TS}$ [$W_{th}$]'] = df_TS["105 - mass [kg/s]"]*(df_TS["H_out_TS [J/kg]"] - df_TS["H_in_TS [J/kg]"])

#Affichage des puissances [W]
df_power_PH = df_PH.filter([r'$P_{elec,PH}$ [$W$]', r'$P_{heat,PH}$ [$W_{th}$]'])
df_power_PH["Losses (PH) [W]"] = df_power_PH[r'$P_{elec,PH}$ [$W$]'] - df_power_PH[r'$P_{heat,PH}$ [$W_{th}$]']
df_interactive_plot(df_power_PH,"Puissances thermique et électrique au préchauffeur")
Pmean_PH , Pstd_PH = df_power_PH.mean(), df_power_PH.std()

df_power_TS = df_TS.filter([r'$P_{elec,TS}$ [$W$]', r'$P_{heat,TS}$ [$W_{th}$]'])
df_power_TS["Losses (TS) [W]"] = df_power_TS[r'$P_{elec,TS}$ [$W$]'] - df_power_TS[r'$P_{heat,TS}$ [$W_{th}$]']
df_interactive_plot(df_power_TS,"Puissances thermique et électrique à l'évaporateur")
Pmean_TS , Pstd_TS = df_power_TS.mean(), df_power_TS.std()


#############################################################################


# Instruments
instruments = ('Preheater', 'Evaporateur')
indices = np.arange(len(instruments))  # Positions des groupes de barres

# Données
P_elec = np.array([round(Pmean_PH.iloc[0], 2), round(Pmean_TS.iloc[0], 2)])
P_calor = np.array([round(Pmean_PH.iloc[1], 2), round(Pmean_TS.iloc[1], 2)])
P_pertes = np.array([round(Pmean_PH.iloc[2], 2), round(Pmean_TS.iloc[2], 2)])

# Calcul des pourcentages
pct_calor = (P_calor / P_elec) * 100
pct_pertes = (P_pertes / P_elec) * 100

# Largeur des barres
bar_width = 0.3

# Création du graphique
fig, ax = plt.subplots()

# Barre pour la puissance électrique
p1 = ax.bar(indices, P_elec, bar_width, color='yellow', label=r'$P_{électrique}$')

# Barre pour la puissance calorifique + pertes
bottom = np.zeros(len(instruments))
p2 = ax.bar(indices + bar_width, P_calor, bar_width, color='orange', label=r'$P_{calorifique}$')
p3 = ax.bar(indices + bar_width, P_pertes, bar_width, bottom=P_calor, color='red', label='Pertes thermiques')

# Ajout des labels avec pourcentages
ax.bar_label(p1, labels=[f"{val} W" for val in P_elec], label_type='center')
ax.bar_label(p2, labels=[f"{val} W\n({pct:.1f}%)" for val, pct in zip(P_calor, pct_calor)], label_type='center')
ax.bar_label(p3, labels=[f"{val} W\n({pct:.1f}%)" for val, pct in zip(P_pertes, pct_pertes)], label_type='center')

# Ajustements graphiques
ax.set_xticks(indices + bar_width / 2)
ax.set_xticklabels(instruments)
ax.set_title("Bilan d'énergie sur le pré-chauffeur")
ax.legend()

# Affichage
plt.show()
fig.savefig(getAFilesPathToSave())
